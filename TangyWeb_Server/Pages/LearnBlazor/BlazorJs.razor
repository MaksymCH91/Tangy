@page "/LearnBlazor/BlazorJs"
@inject IJSRuntime _JsRuntime
<h3>BlazorJs</h3>
<div class="row">
    <button class="btn btn-secondary" @onclick="TestConfirmBox"> Test Confirm Button</button>
</div>
<div class="row">
    <button class="btn btn-success" style="Width:200px" @onclick="ToastrSuccess"> Toastr Success</button>
    <button class="btn btn-danger"  style="Width:200px" @onclick="ToastrFailure"> Toastr failure</button>
</div>
<div class="row">
    <button class="btn btn-success" style="Width:200px" @onclick=" SweetAlertSuccess"> Toastr Success</button>
    <button class="btn btn-danger" style="Width:200px" @onclick="SweetAlertFailure"> Toastr failure</button>
</div>
<div class="row">
    @if (ConfirmResult)
    {
        <p> Conformation has been made !</p>
    }
    else
    {
        <p> Conformation Pending !</p>
    }
</div>

@code {

    private string ConfirmMessage = "Are you sure want to click?";
    private bool ConfirmResult { get; set; }
    private async Task TestConfirmBox()
    {
       ConfirmResult= await _JsRuntime.InvokeAsync<bool>("confirm", ConfirmMessage);
    }
    private async Task ToastrSuccess()
    {
        await _JsRuntime.ToastrSuccess("Operation Successful");
       
    }
    private async Task ToastrFailure()
    {
        await _JsRuntime.InvokeVoidAsync("Window.ShowToastr", "error", "Error");
    }

    private async Task SweetAlertSuccess()
    {
        await _JsRuntime.InvokeVoidAsync("Window.ShowSwal", "success", "Task completed successfully!");
    }
    private async Task SweetAlertFailure()
    {
        await _JsRuntime.InvokeVoidAsync("Window.ShowSwal", "error", "Task failed");
    }

}
